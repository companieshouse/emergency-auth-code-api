// Code generated by MockGen. DO NOT EDIT.
// Source: director_service.go

package service

import (
	models "github.com/companieshouse/emergency-auth-code-api/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDirectorDatabase is a mock of DirectorDatabase interface
type MockDirectorDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDirectorDatabaseMockRecorder
}

// MockDirectorDatabaseMockRecorder is the mock recorder for MockDirectorDatabase
type MockDirectorDatabaseMockRecorder struct {
	mock *MockDirectorDatabase
}

// NewMockDirectorDatabase creates a new mock instance
func NewMockDirectorDatabase(ctrl *gomock.Controller) *MockDirectorDatabase {
	mock := &MockDirectorDatabase{ctrl: ctrl}
	mock.recorder = &MockDirectorDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDirectorDatabase) EXPECT() *MockDirectorDatabaseMockRecorder {
	return m.recorder
}

// GetCompanyDirectors mocks base method
func (m *MockDirectorDatabase) GetCompanyDirectors(arg0 string) (*models.CompanyOfficers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyDirectors", arg0)
	ret0, _ := ret[0].(*models.CompanyOfficers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyDirectors indicates an expected call of GetCompanyDirectors
func (mr *MockDirectorDatabaseMockRecorder) GetCompanyDirectors(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyDirectors", reflect.TypeOf((*MockDirectorDatabase)(nil).GetCompanyDirectors), arg0)
}
